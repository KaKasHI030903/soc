Phase 1  
DESIGN FILE  
module phase1 ( 
input clk, 
input rst, 
input code_in, 
input enable, 
output reg phase1_done, 
output reg phase1_fail 
); 
parameter IDLE = 3'd0, 
BIT1 = 3'd1, 
BIT2 = 3'd2, 
BIT3 = 3'd3, 
BIT4 = 3'd4, 
CHECK = 3'd5; 
reg [2:0] state, next_state; 
reg [3:0] shift_reg; 
always @(posedge clk or posedge rst) begin 
if (rst) 
state <= IDLE; 
else if (enable) 
state <= next_state; 
end 
always @(posedge clk) begin 
if (enable) begin 
case (state) 
IDLE: begin 
shift_reg <= 4'b0000; 
phase1_done <= 0; 
phase1_fail <= 0; 
end 
BIT1: shift_reg[3] <= code_in; 
BIT2: shift_reg[2] <= code_in; 
BIT3: shift_reg[1] <= code_in; 
BIT4: shift_reg[0] <= code_in; 
CHECK: begin 
if (shift_reg == 4'b1011) 
phase1_done <= 1; 
else 
phase1_fail <= 1; 
end 
endcase 
end 
end 
always @(*) begin 
next_state = state; 
case (state) 
IDLE: if (enable) next_state = BIT1; 
BIT1: next_state = BIT2; 
BIT2: next_state = BIT3; 
BIT3: next_state = BIT4; 
BIT4: next_state = CHECK; 
CHECK: next_state = IDLE; 
endcase 
end 
endmodule 
PHASE 1 

TESTBENCH  
module phase1_tb; 
reg clk, rst, code_in, enable; 
wire phase1_done, phase1_fail; 
phase1 uut ( 
.clk(clk), .rst(rst), .code_in(code_in), .enable(enable), 
.phase1_done(phase1_done), .phase1_fail(phase1_fail) 
); 
initial begin 
$dumpfile("phase1.vcd"); 
$dumpvars(0, phase1_tb); 
clk = 0; rst = 1; enable = 0; 
#5 rst = 0; 
enable = 1; 
// Send correct sequence: 1 0 1 1 
send_bit(1); send_bit(0); send_bit(1); send_bit(1); 
#10; 
$finish; 
end 
task send_bit(input bit val); 
begin 
code_in = val; 
#10 clk = 1; #10 clk = 0; 
end 
endtask 
endmodule 

Phase 2 
Design file  
module phase2 ( 
input clk, 
input rst, 
input enable, 
input btn_in,         
    // user input bit (1 or 0) 
output reg phase2_done, 
output reg phase2_fail 
); 
parameter IDLE = 2'd0, 
COLLECT = 2'd1, 
CHECK = 2'd2; 
reg [1:0] state, next_state; 
reg [2:0] input_pattern; 
reg [1:0] bit_count; 
always @(posedge clk or posedge rst) begin 
if (rst) 
state <= IDLE; 
else if (enable) 
state <= next_state; 
end 
always @(posedge clk) begin 
if (enable) begin 
case (state) 
IDLE: begin 
input_pattern <= 3'b000; 
bit_count <= 0; 
phase2_done <= 0; 
phase2_fail <= 0; 
end 
COLLECT: begin 
input_pattern <= {input_pattern[1:0], btn_in}; 
bit_count <= bit_count + 1; 
end 
CHECK: begin 
if (input_pattern == 3'b110) 
phase2_done <= 1; 
else 
phase2_fail <= 1; 
end 
endcase 
end 
end 
always @(*) begin 
next_state = state; 
case (state) 
IDLE: if (enable) next_state = COLLECT; 
COLLECT: if (bit_count == 2'd3) next_state = CHECK; 
CHECK: next_state = IDLE; 
endcase 
end 
endmodule 

TEST BENCH  
module phase2_tb; 
reg clk, rst, enable, btn_in; 
wire phase2_done, phase2_fail; 
phase2 uut ( 
.clk(clk), .rst(rst), .enable(enable), .btn_in(btn_in), 
.phase2_done(phase2_done), .phase2_fail(phase2_fail) 
); 
initial begin 
$dumpfile("phase2.vcd"); 
$dumpvars(0, phase2_tb); 
clk = 0; rst = 1; enable = 0; 
#5 rst = 0; 
enable = 1; 
// Send correct pattern: 110 
send_bit(1); send_bit(1); send_bit(0); 
#20; 
$finish; 
end 
task send_bit(input bit val); 
begin 
btn_in = val; 
#10 clk = 1; #10 clk = 0; 
end 
endtask 
endmodule 

Phase 3  
Design file  
module phase3 ( 
input clk, 
input rst, 
input enable, 
input [2:0] dir_in,      
    // 3-bit direction input 
output reg phase3_done, 
output reg phase3_fail 
); 
parameter IDLE    = 3'd0, 
STEP1   = 3'd1, 
STEP2   = 3'd2, 
STEP3   = 3'd3, 
STEP4   = 3'd4, 
STEP5   = 3'd5, 
DONE    = 3'd6, 
FAIL    = 3'd7; 
parameter UP    = 3'b000, 
RIGHT = 3'b011, 
DOWN  = 3'b001, 
LEFT  = 3'b010; 
reg [2:0] state, next_state; 
always @(posedge clk or posedge rst) begin 
if (rst) 
state <= IDLE; 
else if (enable) 
state <= next_state; 
end 
always @(*) begin 
next_state = state; 
phase3_done = 0; 
phase3_fail = 0; 
case (state) 
IDLE:   next_state = STEP1; 
STEP1:  next_state = (dir_in == UP)    ? STEP2 : FAIL; 
STEP2:  next_state = (dir_in == RIGHT) ? STEP3 : FAIL; 
STEP3:  next_state = (dir_in == DOWN)  ? STEP4 : FAIL; 
STEP4:  next_state = (dir_in == LEFT)  ? STEP5 : FAIL; 
STEP5:  next_state = (dir_in == UP)    ? DONE  : FAIL; 
DONE:   phase3_done = 1; 
FAIL:   phase3_fail = 1; 
endcase 
end 
endmodule 

TESTBENCH  
module phase3_tb; 
reg clk, rst, enable; 
reg [2:0] dir_in; 
wire phase3_done, phase3_fail; 
phase3 uut ( 
.clk(clk), .rst(rst), .enable(enable), 
.dir_in(dir_in), 
.phase3_done(phase3_done), 
.phase3_fail(phase3_fail) 
); 
initial begin 
$dumpfile("phase3.vcd"); 
$dumpvars(0, phase3_tb); 
clk = 0; rst = 1; enable = 0; 
#5 rst = 0; enable = 1; 
// Correct sequence: UP, RIGHT, DOWN, LEFT, UP 
input_dir(3'b000);  // UP 
input_dir(3'b011);  // RIGHT 
input_dir(3'b001);  // DOWN 
input_dir(3'b010);  // LEFT 
input_dir(3'b000);  // UP 
#20 $finish; 
end 
task input_dir(input [2:0] val); 
begin 
dir_in = val; 
#10 clk = 1; #10 clk = 0; 
end 
endtask 
endmodule 

Phase 4  
Design file  
module phase4 ( 
input clk, 
input rst, 
input enable, 
input [7:0] plate_in, 
output reg phase4_done, 
output reg phase4_fail 
); 
parameter IDLE   = 3'd0, 
PLATE1 = 3'd1, 
PLATE2 = 3'd2, 
PLATE3 = 3'd3, 
DONE   = 3'd4, 
FAIL   = 3'd5; 
parameter P1 = 8'b10101010, 
P2 = 8'b11001100, 
P3 = 8'b11110000; 
reg [2:0] state, next_state; 
always @(posedge clk or posedge rst) begin 
if (rst) 
state <= IDLE; 
else if (enable) 
state <= next_state; 
end 
always @(*) begin 
next_state = state; 
phase4_done = 0; 
phase4_fail = 0; 
case (state) 
IDLE:   next_state = PLATE1; 
PLATE1: next_state = (plate_in == P1) ? PLATE2 : FAIL; 
PLATE2: next_state = (plate_in == P2) ? PLATE3 : FAIL; 
PLATE3: next_state = (plate_in == P3) ? DONE   : FAIL; 
DONE:   phase4_done = 1; 
FAIL:   phase4_fail = 1; 
endcase 
end 
endmodule 

TEST BENCH  
module phase4_tb; 
reg clk, rst, enable; 
reg [7:0] plate_in; 
wire phase4_done, phase4_fail; 
phase4 uut ( 
.clk(clk), .rst(rst), .enable(enable), 
.plate_in(plate_in), 
.phase4_done(phase4_done), 
.phase4_fail(phase4_fail) 
); 
initial begin 
$dumpfile("phase4.vcd"); 
$dumpvars(0, phase4_tb); 
clk = 0; rst = 1; enable = 0; 
#5 rst = 0; enable = 1; 
// Correct sequence 
press_plate(8'b10101010); 
press_plate(8'b11001100); 
press_plate(8'b11110000); 
#20 $finish; 
end 
task press_plate(input [7:0] val); 
begin 
plate_in = val; 
#10 clk = 1; #10 clk = 0; 
end 
endtask 
endmodule 

PHASE 5 
DESIGN FILE  
module phase5 ( 
input clk, 
input rst, 
input enable, 
output reg [1:0] time_lock_out, 
output reg phase5_done, 
output reg phase5_fail 
); 
parameter IDLE   = 3'd0, 
STEP1  = 3'd1, 
STEP2  = 3'd2, 
STEP3  = 3'd3, 
DONE   = 3'd4, 
FAIL   = 3'd5; 
reg [2:0] state, next_state; 
reg [3:0] count; 
always @(posedge clk or posedge rst) begin 
if (rst) 
state <= IDLE; 
else if (enable) 
state <= next_state; 
end 
always @(posedge clk or posedge rst) begin 
if (rst) 
count <= 0; 
else if (enable && state != DONE && state != FAIL) 
count <= count + 1; 
end 
always @(*) begin 
next_state = state; 
time_lock_out = 2'b00; 
phase5_done = 0; 
phase5_fail = 0; 
case (state) 
IDLE:   next_state = STEP1; 
STEP1: begin 
time_lock_out = 2'b01; 
if (count == 2) next_state = STEP2; 
end 
STEP2: begin 
time_lock_out = 2'b10; 
if (count == 4) next_state = STEP3; 
end 
STEP3: begin 
time_lock_out = 2'b11; 
if (count == 6) next_state = DONE; 
end 
DONE: phase5_done = 1; 
FAIL: phase5_fail = 1; 
endcase 
end 
endmodule 

TESTBENCH  
module phase5_tb; 
reg clk, rst, enable; 
wire [1:0] time_lock_out; 
wire phase5_done, phase5_fail; 
phase5 uut ( 
.clk(clk), .rst(rst), .enable(enable), 
.time_lock_out(time_lock_out), 
.phase5_done(phase5_done), 
.phase5_fail(phase5_fail) 
); 
initial begin 
$dumpfile("phase5.vcd"); 
$dumpvars(0, phase5_tb); 
clk = 0; rst = 1; enable = 0; 
#5 rst = 0; enable = 1; 
repeat (20) begin 
#5 clk = 1; #5 clk = 0; 
end 
#10 $finish; 
end 
endmodule  

TOP  MODULE INTEGRATION  
Design
module top_module (
    input  wire        clk,
    input  wire        rst,

    input  wire [3:0]  keypad_input,
    input  wire [2:0]  direction_input,
    input  wire [3:0]  color_input,
    input  wire [7:0]  pattern_input,
    input  wire [3:0]  code_input,
    input  wire [3:0]  final_key_input,

    output wire        vault_escape,
    output wire        all_done
);

// Phase done signals
wire phase1_done, phase2_done, phase3_done, phase4_done, phase5_done;

// Unlock signals (optional, for debug or control)
wire p1_unlock, p2_unlock, p3_unlock, p4_unlock, p5_unlock;

// Phase 1: Keypad FSM
phase1_keypad key_fsm (
    .clk(clk),
    .rst(rst),
    .keypad_input(keypad_input),
    .phase_done(phase1_done),
    .unlock(p1_unlock)
);

// Phase 2: Direction FSM
phase2_direction dir_fsm (
    .clk(clk),
    .rst(rst),
    .start(phase1_done),
    .direction_input(direction_input),
    .phase_done(phase2_done),
    .unlock(p2_unlock)
);

// Phase 3: Color FSM
phase3_color color_fsm (
    .clk(clk),
    .rst(rst),
    .start(phase2_done),
    .color_input(color_input),
    .phase_done(phase3_done),
    .unlock(p3_unlock)
);

// Phase 4: Pattern FSM
phase4_pattern pattern_fsm (
    .clk(clk),
    .rst(rst),
    .start(phase3_done),
    .pattern_input(pattern_input),
    .phase_done(phase4_done),
    .unlock(p4_unlock)
);

// Phase 5: Final Key FSM
phase5_finalkey finalkey_fsm (
    .clk(clk),
    .rst(rst),
    .start(phase4_done),
    .code_input(code_input),
    .final_key_input(final_key_input),
    .phase_done(phase5_done),
    .unlock(p5_unlock)
);

// vault_escape = last phase done
assign vault_escape = phase5_done;

// all_done = all phases done
assign all_done = phase1_done & phase2_done & phase3_done & phase4_done & phase5_done;

endmodule
module phase1_keypad (
    input  wire        clk,
    input  wire        rst,
    input  wire [3:0]  keypad_input,
    output reg         phase_done,
    output reg         unlock
);

    // State encoding using parameters
    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter DONE = 2'b10;

    reg [1:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst) state <= IDLE;
        else state <= next_state;
    end

    always @(*) begin
        next_state = state;
        phase_done = 0;
        unlock = 0;

        case(state)
            IDLE: begin
                if (keypad_input != 4'b0000)
                    next_state = WAIT;
            end
            WAIT: begin
                // Simulate condition for done
                if (keypad_input == 4'b1111)
                    next_state = DONE;
            end
            DONE: begin
                phase_done = 1;
                unlock = 1;
                // Stay here or reset
            end
        endcase
    end

endmodule
module phase2_direction (
    input  wire        clk,
    input  wire        rst,
    input  wire        start,
    input  wire [2:0]  direction_input,
    output reg         phase_done,
    output reg         unlock
);

    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter DONE = 2'b10;

    reg [1:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst) state <= IDLE;
        else if (~start) state <= IDLE;
        else state <= next_state;
    end

    always @(*) begin
        next_state = state;
        phase_done = 0;
        unlock = 0;

        case(state)
            IDLE: if (start) next_state = WAIT;
            WAIT: begin
                // Example: done if direction input == 3'b111
                if (direction_input == 3'b111) next_state = DONE;
            end
            DONE: begin
                phase_done = 1;
                unlock = 1;
            end
        endcase
    end

endmodule
module phase3_color (
    input  wire        clk,
    input  wire        rst,
    input  wire        start,
    input  wire [3:0]  color_input,
    output reg         phase_done,
    output reg         unlock
);

    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter DONE = 2'b10;

    reg [1:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst) state <= IDLE;
        else if (~start) state <= IDLE;
        else state <= next_state;
    end

    always @(*) begin
        next_state = state;
        phase_done = 0;
        unlock = 0;

        case(state)
            IDLE: if (start) next_state = WAIT;
            WAIT: begin
                if (color_input == 4'b1111) next_state = DONE;
            end
            DONE: begin
                phase_done = 1;
                unlock = 1;
            end
        endcase
    end

endmodule
module phase4_pattern (
    input  wire        clk,
    input  wire        rst,
    input  wire        start,
    input  wire [7:0]  pattern_input,
    output reg         phase_done,
    output reg         unlock
);

    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter DONE = 2'b10;

    reg [1:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst) state <= IDLE;
        else if (~start) state <= IDLE;
        else state <= next_state;
    end

    always @(*) begin
        next_state = state;
        phase_done = 0;
        unlock = 0;

        case(state)
            IDLE: if (start) next_state = WAIT;
            WAIT: begin
                if (pattern_input == 8'hFF) next_state = DONE;
            end
            DONE: begin
                phase_done = 1;
                unlock = 1;
            end
        endcase
    end

endmodule
module phase5_finalkey (
    input  wire        clk,
    input  wire        rst,
    input  wire        start,
    input  wire [3:0]  code_input,
    input  wire [3:0]  final_key_input,
    output reg         phase_done,
    output reg         unlock
);

    parameter IDLE = 2'b00;
    parameter WAIT = 2'b01;
    parameter DONE = 2'b10;

    reg [1:0] state, next_state;

    always @(posedge clk or posedge rst) begin
        if (rst) state <= IDLE;
        else if (~start) state <= IDLE;
        else state <= next_state;
    end

    always @(*) begin
        next_state = state;
        phase_done = 0;
        unlock = 0;

        case(state)
            IDLE: if (start) next_state = WAIT;
            WAIT: begin
                if ((code_input == 4'b1111) && (final_key_input == 4'b1111)) next_state = DONE;
            end
            DONE: begin
                phase_done = 1;
                unlock = 1;
            end
        endcase
    end

endmodule

Test Bench
`timescale 1ns/1ps

module top_module_tb;

    reg         clk;
    reg         rst;

    reg  [3:0]  keypad_input;
    reg  [2:0]  direction_input;
    reg  [3:0]  color_input;
    reg  [7:0]  pattern_input;
    reg  [3:0]  code_input;
    reg  [3:0]  final_key_input;

    wire        vault_escape;
    wire        all_done;

    // Instantiate the DUT
    top_module dut (
        .clk(clk),
        .rst(rst),
        .keypad_input(keypad_input),
        .direction_input(direction_input),
        .color_input(color_input),
        .pattern_input(pattern_input),
        .code_input(code_input),
        .final_key_input(final_key_input),
        .vault_escape(vault_escape),
        .all_done(all_done)
    );

    // Clock generation: 10ns period
    initial clk = 0;
    always #5 clk = ~clk;

    // VCD dump
    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, top_module_tb);
    end

    initial begin
        // Initialize inputs
        rst = 1;
        keypad_input = 4'b0000;
        direction_input = 3'b000;
        color_input = 4'b0000;
        pattern_input = 8'h00;
        code_input = 4'b0000;
        final_key_input = 4'b0000;

        // Apply reset for some cycles
        #20;
        rst = 0;

        // Phase 1: Keypad FSM
        keypad_input = 4'b0011;
        #20;
        keypad_input = 4'b1111; // done condition
        #20;

        // Phase 2: Direction FSM
        direction_input = 3'b010;
        #20;
        direction_input = 3'b111; // done condition
        #20;

        // Phase 3: Color FSM
        color_input = 4'b0010;
        #20;
        color_input = 4'b1111; // done condition
        #20;

        // Phase 4: Pattern FSM
        pattern_input = 8'h55;
        #20;
        pattern_input = 8'hFF; // done condition
        #20;

        // Phase 5: Final Key FSM
        code_input = 4'b1010;
        final_key_input = 4'b0101;
        #20;
        code_input = 4'b1111;
        final_key_input = 4'b1111; // done condition
        #20;

        #50;
        $finish;
    end

    initial begin
        $monitor("Time=%0t | vault_escape=%b | all_done=%b", $time, vault_escape, all_done);
    end

endmodule
